/* Step 26
To start your CSS, normalize the CSS rules by targeting all elements with *, including the ::before and ::after pseudo-selectors.

Set the padding and margin properties both to 0 and set the box-sizing property to border-box.

Step 27
Create an html selector and give it a font-size property set to 62.5%. This will set the default font size for your web page to 10px (the browser default is 16px).

This will make it easier for you to work with rem units later, as 2rem would be 20px.

Step 28
Create a body selector. Set the font-family property to Baskervville, with a fallback of serif. Set the color property to linen and the background-color property to rgb(20, 30, 40).

Step 29
Create an h1 selector, and set the font-family property to Anton with the fallback of sans-serif.

Step 30
Create an h2, h3, h4, h5, h6 selector. Give it a font-family property set to Raleway with a fallback of sans-serif.

Step 31
Create an a selector, and give it a text-decoration property set to none and a color property set to linen.

Step 32
Now you are ready to start putting together the grid layout. CSS Grid offers a two-dimensional grid-based layout, allowing you to center items horizontally and vertically while still retaining control to do things like overlap elements.

Begin by creating a main selector and giving it a display property set to grid.

Step 33
Now you can style the layout of your grid. CSS Grid is similar to Flexbox in that it has a special property for both the parent and child elements.

In this case, your parent element is the main element. Set the content to have a three-column layout by adding a grid-template-columns property with a value of 1fr 94rem 1fr. This will create three columns where the middle column is 94rem wide, and the first and last columns are both 1 fraction of the remaining space in the grid container.

Step 34
Use the minmax function to make your columns responsive on any device. The minmax function takes two arguments, the first being the minimum value and the second being the maximum. These values could be a length, percentage, fr, or even a keyword like max-content.

Wrap each of your already defined values of the grid-template-columns property in a minmax function, using each value as the second argument. The first argument should be 2rem, min-content, and 2rem respectively.

Step 35
To add space between rows in the grid layout, you can use the row-gap property. Give the main selector a row-gap property of 3rem.

Step 36
Your magazine will have three primary sections. You already set the overall layout in the main rule, but you can adjust the placement in the child rules.

One option is the grid-column property, which is shorthand for grid-column-start and grid-column-end. The grid-column property tells the grid item which grid line to start and end at.

Create a .heading rule and set the grid-column property to 2 / 3. This will tell the .heading element to start at grid line 2 and end at grid line 3.

*/

*,
*::before,
*::after {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
}

body {
  font-family: "Baskervville", serif;
  color: linen;
  background-color: rgb(20, 30, 40);
}

a {
  text-decoration: none;
  color: linen;
}

h1 {
  font-family: Anton, sans-serif;
}

h2,
h3,
h4,
h5,
h6 {
  font-family: Raleway, sans-serif;
}

main {
  display: grid;
  grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(
      2rem,
      1fr
    );
  row-gap: 3rem;
}

.heading {
    grid-column: 2/3
}