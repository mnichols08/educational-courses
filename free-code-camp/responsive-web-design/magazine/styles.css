/* Step 26
To start your CSS, normalize the CSS rules by targeting all elements with *, including the ::before and ::after pseudo-selectors.

Set the padding and margin properties both to 0 and set the box-sizing property to border-box.

Step 27
Create an html selector and give it a font-size property set to 62.5%. This will set the default font size for your web page to 10px (the browser default is 16px).

This will make it easier for you to work with rem units later, as 2rem would be 20px.

Step 28
Create a body selector. Set the font-family property to Baskervville, with a fallback of serif. Set the color property to linen and the background-color property to rgb(20, 30, 40).

Step 29
Create an h1 selector, and set the font-family property to Anton with the fallback of sans-serif.

Step 30
Create an h2, h3, h4, h5, h6 selector. Give it a font-family property set to Raleway with a fallback of sans-serif.

Step 31
Create an a selector, and give it a text-decoration property set to none and a color property set to linen.

Step 32
Now you are ready to start putting together the grid layout. CSS Grid offers a two-dimensional grid-based layout, allowing you to center items horizontally and vertically while still retaining control to do things like overlap elements.

Begin by creating a main selector and giving it a display property set to grid.

Step 33
Now you can style the layout of your grid. CSS Grid is similar to Flexbox in that it has a special property for both the parent and child elements.

In this case, your parent element is the main element. Set the content to have a three-column layout by adding a grid-template-columns property with a value of 1fr 94rem 1fr. This will create three columns where the middle column is 94rem wide, and the first and last columns are both 1 fraction of the remaining space in the grid container.

Step 34
Use the minmax function to make your columns responsive on any device. The minmax function takes two arguments, the first being the minimum value and the second being the maximum. These values could be a length, percentage, fr, or even a keyword like max-content.

Wrap each of your already defined values of the grid-template-columns property in a minmax function, using each value as the second argument. The first argument should be 2rem, min-content, and 2rem respectively.

Step 35
To add space between rows in the grid layout, you can use the row-gap property. Give the main selector a row-gap property of 3rem.

Step 36
Your magazine will have three primary sections. You already set the overall layout in the main rule, but you can adjust the placement in the child rules.

One option is the grid-column property, which is shorthand for grid-column-start and grid-column-end. The grid-column property tells the grid item which grid line to start and end at.

Create a .heading rule and set the grid-column property to 2 / 3. This will tell the .heading element to start at grid line 2 and end at grid line 3.

Step 37
Create a .text selector and give it a grid-column property set to 2 / 3.

Step 38
For additional control over the layout of your content, you can have a CSS Grid within a CSS Grid.

Set the display property of your .heading selector to grid.

Step 39
Now you can style the content of the .heading element with CSS Grid.

The CSS repeat() function is used to repeat a value, rather than writing it out manually, and is helpful for grid layouts. For example, setting the grid-template-columns property to repeat(20, 200px) would create 20 columns each 200px wide.

Give your .heading element a grid-template-columns property set to repeat(2, 1fr) to create two columns of equal width.

Step 40
Give your .heading selector a row-gap property set to 1.5rem.

Step 41
Remember that the grid-column property determines which columns an element starts and ends at. There may be times where you are unsure of how many columns your grid will have, but you want an element to stop at the last column. To do this, you can use -1 for the end column.

Create a .hero selector and give it a grid-column property set to 1 / -1. This will tell the element to span the full width of the grid.

Step 42
Give the .hero selector a position property set to relative.

Step 44
Create an img selector and give it a width property set to 100%, and an object-fit property set to cover.

The object-fit property tells the browser how to position the element within its container. In this case, cover will set the image to fill the container, cropping as needed to avoid changing the aspect ratio.

Step 45
Create a .hero-title selector and give it a text-align property set to center, a color property set to orangered and a font-size property set to 8rem.

Step 46
The subtitle also needs to be styled. Create a .hero-subtitle selector and give it a font-size property set to 2.4rem, a color property set to orangered, and a text-align property set to center.

Step 47
Create an .author selector and give it a font-size property set to 2rem and a font-family property set to Raleway with a fallback of sans-serif.

Step 48
Create a .author-name a:hover selector and give it a background-color property set to #306203.

This will create a hover effect only for the a element within the .author-name, showing the original freeCodeCamp green in the background.

Step 49
Create a .publish-date selector and give it a color property of rgba(255, 255, 255, 0.5).

Step 50
Create a .social-icons selector. Give it a display property set to grid, and a font-size property set to 3rem.

Step 51
The default settings for CSS Grid will create additional rows as needed, unlike Flexbox. Give the .social-icons selector a grid-template-columns property set to repeat(5, 1fr) to arrange the icons in a single row.

Step 52
If you wanted to add more social icons, but keep them on the same row, you would need to update grid-template-columns to create additional columns. As an alternative, you can use the grid-auto-flow property.

This property takes either row or column as the first value, with an optional second value of dense. grid-auto-flow uses an auto-placement algorithm to adjust the grid layout. Setting it to column will tell the algorithm to create new columns for content as needed. The dense value allows the algorithm to backtrack and fill holes in the grid with smaller items, which can result in items appearing out of order.

For your .social-icons selector, set the grid-auto-flow property to column.

Step 53
Now the auto-placement algorithm will kick in when you add a new icon element. However, the algorithm defaults the new column width to be auto, which will not match your current columns.

You can override this with the grid-auto-columns property. Give the .social-icons selector a grid-auto-columns property set to 1fr.

Step 54
Much like Flexbox, with CSS Grid you can align the content of grid items with align-items and justify-items. align-items will align child elements along the column axis, and justify-items will align child elements along the row axis.

Give the .social-icons selector an align-items property set to center.

Step 55
Give the .text selector a font-size property set to 1.8rem and a letter-spacing property set to 0.6px.

Step 56
Your .text element is not a CSS Grid, but you can create columns within an element without using Grid by using the column-width property.

Give your .text selector a column-width property set to 25rem.

Step 57
Magazines often use justified text in their printed content to structure their layout and control the flow of their content. While this works in printed form, justified text on websites can be an accessibility concern, for example presenting challenges for folks with dyslexia.

To make your project look like a printed magazine, give the .text selector a text-align property set to justify.

Step 58
The ::first-letter pseudo-selector allows you to target the first letter in the text content of an element.

Create a .first-paragraph::first-letter selector and set the font-size property to 6rem. Also give it a color property set to orangered to make it stand out.

Step 59
The other text has been shifted out of place. Move it into position by giving the .first-paragraph::first-letter selector a float property set to left and a margin-right property set to 1rem.

Step 60
Create an hr selector, and give it a margin property set to 1.5rem 0

Step 61
To give the hr a color, you need to adjust the border property. Give the hr selector a border property set to 1px solid rgba(120, 120, 120, 0.6).

*/

*,
*::before,
*::after {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
}

body {
  font-family: "Baskervville", serif;
  color: linen;
  background-color: rgb(20, 30, 40);
}

a {
  text-decoration: none;
  color: linen;
}

h1 {
  font-family: Anton, sans-serif;
}

h2,
h3,
h4,
h5,
h6 {
  font-family: Raleway, sans-serif;
}

main {
  display: grid;
  grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(
      2rem,
      1fr
    );
  row-gap: 3rem;
}

img {
  width: 100%;
  object-fit: cover;
}

hr {
    margin: 1.5rem 0;
    border: 1px solid rgba(120,120,120,.6)
}

.heading {
  grid-column: 2/3;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  row-gap: 1.5rem;
}

.text {
  grid-column: 2/3;
  font-size: 1.8rem;
  letter-spacing: .6px;
  column-width: 25rem;
  text-align: justify;
}

.hero {
  grid-column: 1 / -1;
  position: relative;
}

.hero-title {
  text-align: center;
  color: orangered;
  font-size: 8rem;
}

.hero-subtitle {
  font-size: 2.4rem;
  color: orangered;
  text-align: center;
}

.author {
  font-size: 2rem;
  font-family: Raleway, sans-serif;
}

.author-name a:hover {
    background-color: #306203;
}

.publish-date {
    color: rgba(255,255,255,.5)
}

.social-icons {
    display: grid;
    font-size: 3rem;
    grid-template-columns: repeat(5, 1fr);
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
    align-items: center;
}

.first-paragraph::first-letter{
    font-size: 6rem;
    color: orangered;
    float: left;
    margin-right: 1rem;
}

